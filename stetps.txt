Backend/

    1.Instalaciones y Conectarse a la BD

        npm init -y
        npm i 
            express
            dotenv
            mongoose

        Crear cluster en Atlas

            Username -> gabreseapp
            Password -> andvtravel

            IP Address -> 0.0.0.0
            Copiar URI para conectarse desde una aplicacion y pegarlo en .env
        
        index.js -> Conectarse con mongoose a la bd
    
    2.Create Your First API using Node.js

        routes/
            auth.route.js
            hotels.route.js
            users.route.js

        Agregar routes en index.js

    3.Node.js MongoDB CRUD Operations

    4.Middleware para errores

        index.js
            Hacemos Middleware que nos permitirá capturar cualquier error en cualquier ruta
        
        utils/ error.js
            La función create error nos permite ser más especifos al mostrar el error,
            status code y mensaje especifico

    5.Carpeta Controllers


        Separar la lógica de las consultas a la bd en los controladores
        Llamar funciones controlador en routes

    6.Register y Login

        npm i bcryptjs para encriptar la contraseña

        Controllers/auth.controller.js

            login() ->
                const { password, isAdmin, ...otherDetails } = user._doc;
                ..otherDetails captura toda la informacion del usaurio menos password y isAdmin 
    
    7.JWT with Cookie

        npm i jsonwebtoken

        Generar JWT_SECRET -> openssl rand -base64 32 (.env)

        Cookie
            npm i cookie-parser
            Se pasará el token dentro de una cookie
            Poner middleware cookie-parser en index.js
    
        auth.controller.js
            Al hacer el login se pasará el token en la cookie
        
    8.Node.js JWT Role-Based Authorization Verification

        Routes y Controllers de Users

        Pruebas

            users.route.js

                Endpoints:
                     '/checkauthentication' -> verifyToken()
                     '/checkuser/:id'-> verifyUser()
                     '/checkadmin' -> verifyAdmin()

            utils/verifyToken.js

                verifyToken()
                    Verifica si hay un token y en caso de que así sea verifca que el token
                    corresponda con el JWT_SECRET
                
                verifyUser()
                    Comprueba que el id enviado como parámetro corresponde con el id guardado en el token
                    En caso de que así sea el usuario podrá eliminar su cuenta
                
                verifyAdmin()
                    Si el usuario es admin podrá eliminar todas las cuentas
        

        Poner verificaciones en lo0s routes de hotels y users
                
    9.Model Relations

        rooms.route.js
            Endpoints que llaman a funciones controlador CRUD

        room.controller.js

            createRoom():
                Al crear una room 
                Se guardará el id de la room dentro el Array de las rooms del hotel con el id pasado como parámetro

            deleteRoom():
                Al eliminar una room también se eliminará de la lista de rooms del hotel
            
            updateRoomAvailability():
                Se buscará el numero de la habitación y se agregarán las fechas enviadas en el body
                En esas fechas ya no estará disponible ese numero de habitación

        index.js -> app.use('/api/rooms', routerRoom);
    
    11.Count By City

    12.Fecth Data
        hotel.controller.js
            countByType() -> Muestra la cantidad de cada tipo de hotel
    
    13.Query en endpoint de get('/hotels')

    14.React Search using a Backend API


Frontend/  

    10.Clonar frontend

            git clone --single-branch -b "react-booking-ui" + url .
    
    12.Fecth Data

        npm i axios

        hooks/-> useFetch.js
            Llmadas a la API
        
        components/featured.jsx
            Mostrar countByCity llamando al useFetch()
        
        components/PropertyList.jsx
            Mostrar countByType llamando al useFetch()
    
    14.React Search using a Backend API

    15.How to Use React Context API

        src/context -> SearchContext.js
            Informacion que se compartirá atravez de toda la aplicación
            INITIAL_STATE -> Los valores al iniciar serán null
            SearchReducer -> Funcion que cambia el estado
        
        
        


